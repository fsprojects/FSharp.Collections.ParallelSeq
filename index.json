[{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq.html","title":"FSharp.Collections.ParallelSeq","content":"PSeq \npseq\u003C\u0027T\u003E"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html","title":"PSeq","content":"PSeq \nParallel operations on IEnumerables. \nPSeq.append \nappend \nPSeq.cast \ncast \nPSeq.choose \nchoose \nPSeq.collect \ncollect \nPSeq.concat \nconcat \nPSeq.countBy \ncountBy \nPSeq.distinct \ndistinct \nPSeq.distinctBy \ndistinctBy \nPSeq.empty \nempty \nPSeq.exists \nexists \nPSeq.exists2 \nexists2 \nPSeq.filter \nfilter \nPSeq.find \nfind \nPSeq.findIndex \nfindIndex \nPSeq.fold \nfold \nPSeq.forall \nforall \nPSeq.forall2 \nforall2 \nPSeq.groupBy \ngroupBy \nPSeq.head \nhead \nPSeq.isEmpty \nisEmpty \nPSeq.init \ninit \nPSeq.iter \niter \nPSeq.iteri \niteri \nPSeq.iter2 \niter2 \nPSeq.length \nlength \nPSeq.map \nmap \nPSeq.map2 \nmap2 \nPSeq.mapi \nmapi \nPSeq.nth \nnth \nPSeq.ofArray \nofArray \nPSeq.ofList \nofList \nPSeq.pick \npick \nPSeq.reduce \nreduce \nPSeq.singleton \nsingleton \nPSeq.skip \nskip \nPSeq.skipWhile \nskipWhile \nPSeq.sort \nsort \nPSeq.sortBy \nsortBy \nPSeq.takeWhile \ntakeWhile \nPSeq.toArray \ntoArray \nPSeq.toList \ntoList \nPSeq.tryFind \ntryFind \nPSeq.tryFindIndex \ntryFindIndex \nPSeq.truncate \ntruncate \nPSeq.zip \nzip \nPSeq.ordered \nordered \nPSeq.withDegreeOfParallelism \nwithDegreeOfParallelism \nPSeq.withExecutionMode \nwithExecutionMode \nPSeq.withMergeOptions \nwithMergeOptions \nPSeq.withCancellation \nwithCancellation \nPSeq.sum \nsum \nPSeq.sumBy \nsumBy \nPSeq.min \nmin \nPSeq.minBy \nminBy \nPSeq.max \nmax \nPSeq.maxBy \nmaxBy \nPSeq.cache \ncache \nPSeq.average \naverage \nPSeq.averageBy \naverageBy"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#append","title":"PSeq.append","content":"PSeq.append \nappend \nOperates in parallel, using System.Linq.Parallel. Wraps the two given enumerations as a single concatenated\n enumeration. \nThe returned sequence may be passed between threads safely. However,\n individual IEnumerator values generated from the returned sequence should not be accessed\n concurrently."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#cast","title":"PSeq.cast","content":"PSeq.cast \ncast \nOperates in parallel, using System.Linq.Parallel. Wraps a loosely-typed System.Collections sequence as a typed sequence. \nThe use of this function usually requires a type annotation.\n An incorrect type annotation may result in runtime type\n errors.\n Individual IEnumerator values generated from the returned sequence should not be accessed concurrently."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#choose","title":"PSeq.choose","content":"PSeq.choose \nchoose \nOperates in parallel, using System.Linq.Parallel. Applies the given function to each element of the list. Return\n the list comprised of the results \u0022x\u0022 for each element where\n the function returns Some(x). \nThe returned sequence may be passed between threads safely. However,\n individual IEnumerator values generated from the returned sequence should not\n be accessed concurrently."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#collect","title":"PSeq.collect","content":"PSeq.collect \ncollect \nOperates in parallel, using System.Linq.Parallel. Applies the given function to each element of the sequence and concatenates all the\n results. \nRemember sequence is lazy, effects are delayed until it is enumerated."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#concat","title":"PSeq.concat","content":"PSeq.concat \nconcat \nOperates in parallel, using System.Linq.Parallel. Combines the given enumeration-of-enumerations as a single concatenated\n enumeration. \nThe returned sequence may be passed between threads safely. However,\n individual IEnumerator values generated from the returned sequence should not be accessed concurrently."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#countBy","title":"PSeq.countBy","content":"PSeq.countBy \ncountBy \nOperates in parallel, using System.Linq.Parallel. Applies a key-generating function to each element of a sequence and return a sequence yielding unique\n keys and their number of occurrences in the original sequence. \nNote that this function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences. The function makes no assumption on the ordering of the original\n sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#distinct","title":"PSeq.distinct","content":"PSeq.distinct \ndistinct \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that contains no duplicate entries according to generic hash and\n equality comparisons on the entries.\n If an element occurs multiple times in the sequence then the later occurrences are discarded."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#distinctBy","title":"PSeq.distinctBy","content":"PSeq.distinctBy \ndistinctBy \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that contains no duplicate entries according to the\n generic hash and equality comparisons on the keys returned by the given key-generating function.\n If an element occurs multiple times in the sequence then the later occurrences are discarded."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#empty","title":"PSeq.empty","content":"PSeq.empty \nempty \nOperates in parallel, using System.Linq.Parallel. Creates an empty sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#exists","title":"PSeq.exists","content":"PSeq.exists \nexists \nOperates in parallel, using System.Linq.Parallel. Tests if any element of the sequence satisfies the given predicate. \nThe predicate is applied to the elements of the input sequence. If any application\n returns true then the overall result is true and no further elements are tested.\n Otherwise, false is returned."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#exists2","title":"PSeq.exists2","content":"PSeq.exists2 \nexists2 \nOperates in parallel, using System.Linq.Parallel. Tests if any pair of corresponding elements of the input sequences satisfies the given predicate. \nThe predicate is applied to matching elements in the two sequences up to the lesser of the\n two lengths of the collections. If any application returns true then the overall result is\n true and no further elements are tested. Otherwise, false is returned. If one sequence is shorter than\n the other then the remaining elements of the longer sequence are ignored."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#filter","title":"PSeq.filter","content":"PSeq.filter \nfilter \nOperates in parallel, using System.Linq.Parallel. Returns a new collection containing only the elements of the collection\n for which the given predicate returns \u0022true\u0022. \nThe returned sequence may be passed between threads safely. However,\n individual IEnumerator values generated from the returned sequence should not be accessed concurrently.\n\n Remember sequence is lazy, effects are delayed until it is enumerated."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#find","title":"PSeq.find","content":"PSeq.find \nfind \nOperates in parallel, using System.Linq.Parallel. Returns the first element for which the given function returns \u003Ccode\u003Etrue\u003C/code\u003E."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#findIndex","title":"PSeq.findIndex","content":"PSeq.findIndex \nfindIndex \nOperates in parallel, using System.Linq.Parallel. Returns the index of the first element for which the given function returns \u003Ccode\u003Etrue\u003C/code\u003E."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#fold","title":"PSeq.fold","content":"PSeq.fold \nfold \nOperates in parallel, using System.Linq.Parallel. Applies a function to each element of the collection, threading an accumulator argument\n through the computation. If the input function is \u003Ccode\u003Ef\u003C/code\u003E and the elements are \u003Ccode\u003Ei0...iN\u003C/code\u003E\n then computes \u003Ccode\u003Ef (... (f source i0)...) iN\u003C/code\u003E"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#forall","title":"PSeq.forall","content":"PSeq.forall \nforall \nOperates in parallel, using System.Linq.Parallel. Tests if all elements of the sequence satisfy the given predicate. \nThe predicate is applied to the elements of the input sequence. If any application\n returns false then the overall result is false and no further elements are tested.\n Otherwise, true is returned."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#forall2","title":"PSeq.forall2","content":"PSeq.forall2 \nforall2 \nOperates in parallel, using System.Linq.Parallel. Tests the all pairs of elements drawn from the two sequences satisfy the\n given predicate. If one sequence is shorter than\n the other then the remaining elements of the longer sequence are ignored."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#groupBy","title":"PSeq.groupBy","content":"PSeq.groupBy \ngroupBy \nOperates in parallel, using System.Linq.Parallel. Applies a key-generating function to each element of a sequence and yields a sequence of\n unique keys. Each unique key has also contains a sequence of all elements that match\n to this key. \nThis function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences. The function makes no assumption on the ordering of the original\n sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#head","title":"PSeq.head","content":"PSeq.head \nhead \nOperates in parallel, using System.Linq.Parallel. Returns the first element of the sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#isEmpty","title":"PSeq.isEmpty","content":"PSeq.isEmpty \nisEmpty \nOperates in parallel, using System.Linq.Parallel. Returns true if the sequence contains no elements, false otherwise."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#init","title":"PSeq.init","content":"PSeq.init \ninit \nOperates in parallel, using System.Linq.Parallel. Generates a new sequence which, when iterated, will return successive\n elements by calling the given function, up to the given count.  The results of calling the function\n will not be saved, that is the function will be reapplied as necessary to\n regenerate the elements.  The function is passed the index of the item being\n generated. \nThe returned sequence may be passed between threads safely. However,\n individual IEnumerator values generated from the returned sequence should not be accessed concurrently."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#iter","title":"PSeq.iter","content":"PSeq.iter \niter \nOperates in parallel, using System.Linq.Parallel. Applies the given function to each element of the collection."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#iteri","title":"PSeq.iteri","content":"PSeq.iteri \niteri \nOperates in parallel, using System.Linq.Parallel. Applies the given function to each element of the collection. The integer passed to the\n function indicates the index of element."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#iter2","title":"PSeq.iter2","content":"PSeq.iter2 \niter2 \nOperates in parallel, using System.Linq.Parallel. Applies the given function to two collections simultaneously. If one sequence is shorter than\n the other then the remaining elements of the longer sequence are ignored."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#length","title":"PSeq.length","content":"PSeq.length \nlength \nOperates in parallel, using System.Linq.Parallel. Returns the lengthof the sequence"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#map","title":"PSeq.map","content":"PSeq.map \nmap \nOperates in parallel, using System.Linq.Parallel. Builds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection.  The given function will be applied\n as elements are demanded using the \u003Ccode\u003EMoveNext\u003C/code\u003E method on enumerators retrieved from the\n object. \nThe returned sequence may be passed between threads safely. However,\n individual IEnumerator values generated from the returned sequence should not be accessed concurrently."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#map2","title":"PSeq.map2","content":"PSeq.map2 \nmap2 \nOperates in parallel, using System.Linq.Parallel. Builds a new collection whose elements are the results of applying the given function\n to the corresponding pairs of elements from the two sequences. If one input sequence is shorter than\n the other then the remaining elements of the longer sequence are ignored."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#mapi","title":"PSeq.mapi","content":"PSeq.mapi \nmapi \nOperates in parallel, using System.Linq.Parallel. Builds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The integer index passed to the\n function indicates the index (from 0) of element being transformed."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#nth","title":"PSeq.nth","content":"PSeq.nth \nnth \nOperates in parallel, using System.Linq.Parallel. Computes the nth element in the collection."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#ofArray","title":"PSeq.ofArray","content":"PSeq.ofArray \nofArray \nOperates in parallel, using System.Linq.Parallel. Views the given array as a sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#ofList","title":"PSeq.ofList","content":"PSeq.ofList \nofList \nOperates in parallel, using System.Linq.Parallel. Views the given list as a sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#pick","title":"PSeq.pick","content":"PSeq.pick \npick \nOperates in parallel, using System.Linq.Parallel. Applies the given function to successive elements, returning the first\n \u003Ccode\u003Ex\u003C/code\u003E where the function returns \u0022Some(x)\u0022."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#reduce","title":"PSeq.reduce","content":"PSeq.reduce \nreduce \nOperates in parallel, using System.Linq.Parallel. Applies a function to each element of the sequence, threading an accumulator argument\n through the computation. Begin by applying the function to the first two elements.\n Then feed this result into the function along with the third element and so on.\n Return the final result."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#singleton","title":"PSeq.singleton","content":"PSeq.singleton \nsingleton \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that yields one item only."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#skip","title":"PSeq.skip","content":"PSeq.skip \nskip \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that skips N elements of the underlying sequence and then yields the\n remaining elements of the sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#skipWhile","title":"PSeq.skipWhile","content":"PSeq.skipWhile \nskipWhile \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that, when iterated, skips elements of the underlying sequence while the\n given predicate returns \u003Ccode\u003Etrue\u003C/code\u003E, and then yields the remaining elements of the sequence."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#sort","title":"PSeq.sort","content":"PSeq.sort \nsort \nOperates in parallel, using System.Linq.Parallel. Yields a sequence ordered by keys. \nThis function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences. The function makes no assumption on the ordering of the original\n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#sortBy","title":"PSeq.sortBy","content":"PSeq.sortBy \nsortBy \nOperates in parallel, using System.Linq.Parallel. Applies a key-generating function to each element of a sequence and yield a sequence ordered\n by keys.  The keys are compared using generic comparison as implemented by \u003Ccode\u003EOperators.compare\u003C/code\u003E. \nThis function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences. The function makes no assumption on the ordering of the original\n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#takeWhile","title":"PSeq.takeWhile","content":"PSeq.takeWhile \ntakeWhile \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that, when iterated, yields elements of the underlying sequence while the\n given predicate returns \u003Ccode\u003Etrue\u003C/code\u003E, and then returns no further elements."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#toArray","title":"PSeq.toArray","content":"PSeq.toArray \ntoArray \nOperates in parallel, using System.Linq.Parallel. Builds an array from the given collection."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#toList","title":"PSeq.toList","content":"PSeq.toList \ntoList \nOperates in parallel, using System.Linq.Parallel. Builds a list from the given collection."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#tryFind","title":"PSeq.tryFind","content":"PSeq.tryFind \ntryFind \nOperates in parallel, using System.Linq.Parallel. Returns the first element for which the given function returns \u003Ccode\u003Etrue\u003C/code\u003E.\n Return \u003Ccode\u003ENone\u003C/code\u003E if no such element exists."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#tryFindIndex","title":"PSeq.tryFindIndex","content":"PSeq.tryFindIndex \ntryFindIndex \nOperates in parallel, using System.Linq.Parallel. Returns the index of the first element in the sequence\n that satisfies the given predicate. Return \u003Ccode\u003ENone\u003C/code\u003E if no such element exists."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#truncate","title":"PSeq.truncate","content":"PSeq.truncate \ntruncate \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that when enumerated returns at most N elements."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#zip","title":"PSeq.zip","content":"PSeq.zip \nzip \nOperates in parallel, using System.Linq.Parallel. Combines the two sequences into a list of pairs. The two sequences need not have equal lengths:\n when one sequence is exhausted any remaining elements in the other\n sequence are ignored."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#ordered","title":"PSeq.ordered","content":"PSeq.ordered \nordered \n"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#withDegreeOfParallelism","title":"PSeq.withDegreeOfParallelism","content":"PSeq.withDegreeOfParallelism \nwithDegreeOfParallelism \n"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#withExecutionMode","title":"PSeq.withExecutionMode","content":"PSeq.withExecutionMode \nwithExecutionMode \n"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#withMergeOptions","title":"PSeq.withMergeOptions","content":"PSeq.withMergeOptions \nwithMergeOptions \n"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#withCancellation","title":"PSeq.withCancellation","content":"PSeq.withCancellation \nwithCancellation \n"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#sum","title":"PSeq.sum","content":"PSeq.sum \nsum \nOperates in parallel, using System.Linq.Parallel. Returns the sum of the elements in the sequence. \nThe elements are summed using the \u003Ccode\u003E\u002B\u003C/code\u003E operator and \u003Ccode\u003EZero\u003C/code\u003E property associated with the generated type."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#sumBy","title":"PSeq.sumBy","content":"PSeq.sumBy \nsumBy \nOperates in parallel, using System.Linq.Parallel. Returns the sum of the results generated by applying the function to each element of the sequence. \nThe generated elements are summed using the \u003Ccode\u003E\u002B\u003C/code\u003E operator and \u003Ccode\u003EZero\u003C/code\u003E property associated with the generated type."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#min","title":"PSeq.min","content":"PSeq.min \nmin \nOperates in parallel, using System.Linq.Parallel. Returns the lowest of all elements of the sequence, compared via \u003Ccode\u003EOperators.min\u003C/code\u003E."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#minBy","title":"PSeq.minBy","content":"PSeq.minBy \nminBy \nOperates in parallel, using System.Linq.Parallel. Returns the lowest of all elements of the sequence, compared via Operators.min on the function result."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#max","title":"PSeq.max","content":"PSeq.max \nmax \nOperates in parallel, using System.Linq.Parallel. Returns the greatest of all elements of the sequence, compared via Operators.max"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#maxBy","title":"PSeq.maxBy","content":"PSeq.maxBy \nmaxBy \nOperates in parallel, using System.Linq.Parallel. Returns the greatest of all elements of the sequence, compared via Operators.max on the function result."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#cache","title":"PSeq.cache","content":"PSeq.cache \ncache \nOperates in parallel, using System.Linq.Parallel. Returns a sequence that corresponds to a cached version of the input sequence.\n This result sequence will have the same elements as the input sequence. The result\n can be enumerated multiple times. The input sequence will be enumerated at most\n once and only as far as is necessary.  Caching a sequence is typically useful when repeatedly\n evaluating items in the original sequence is computationally expensive or if\n iterating the sequence causes side-effects that the user does not want to be\n repeated multiple times.\n\n Enumeration of the result sequence is thread safe in the sense that multiple independent IEnumerator\n values may be used simultaneously from different threads (accesses to\n the internal lookaside table are thread safe). Each individual IEnumerator\n is not typically thread safe and should not be accessed concurrently. \nOnce enumeration of the input sequence has started,\n it\u0027source enumerator will be kept live by this object until the enumeration has completed.\n At that point, the enumerator will be disposed.\n\n The enumerator may be disposed and underlying cache storage released by\n converting the returned sequence object to type IDisposable, and calling the Dispose method\n on this object. The sequence object may then be re-enumerated and a fresh enumerator will\n be used."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#average","title":"PSeq.average","content":"PSeq.average \naverage \nOperates in parallel, using System.Linq.Parallel. Returns the average of the elements in the sequence. \nThe elements are averaged using the \u003Ccode\u003E\u002B\u003C/code\u003E operator, \u003Ccode\u003EDivideByInt\u003C/code\u003E method and \u003Ccode\u003EZero\u003C/code\u003E property\n associated with the element type."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseqmodule.html#averageBy","title":"PSeq.averageBy","content":"PSeq.averageBy \naverageBy \nOperates in parallel, using System.Linq.Parallel. Returns the average of the results generated by applying the function to each element\n of the sequence. \nThe elements are averaged using the \u003Ccode\u003E\u002B\u003C/code\u003E operator, \u003Ccode\u003EDivideByInt\u003C/code\u003E method and \u003Ccode\u003EZero\u003C/code\u003E property\n associated with the generated type."},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/reference/fsharp-collections-parallelseq-pseq-1.html","title":"pseq\u003C\u0027T\u003E","content":"pseq\u003C\u0027T\u003E \n"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/index.html","title":"F# Parallel Sequences\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#I \u0022../src/FSharp.Collections.ParallelSeq/bin/Debug/netstandard2.0\u0022\n\n(**\nF# Parallel Sequences\n===================\n\nThis package provides an F#-style API for the parallel operations on sequences from the\nSystem.Linq.ParallelEnumerable class in .NET. The API is akin to F# operations on sequences.\n\n\nExample\n-------\n\nThis example demonstrates the use of a function defined in this package.\n\n*)\n#r \u0022FSharp.Collections.ParallelSeq.dll\u0022\n\nopen FSharp.Collections.ParallelSeq\n\nlet nums = [| 1..500000 |]\n\nlet isPrime n =\n    let upperBound = int (sqrt (float n))\n\n    let hasDivisor =\n        [ 2..upperBound ]\n        |\u003E List.exists (fun i -\u003E n % i = 0)\n\n    not hasDivisor\n\nlet finalDigitOfPrimes =\n    nums\n    |\u003E PSeq.filter isPrime\n    |\u003E PSeq.groupBy (fun i -\u003E i % 10)\n    |\u003E PSeq.map (fun (k, vs) -\u003E (k, Seq.length vs))\n    |\u003E PSeq.toArray\n(**\nSamples \u0026 documentation\n-----------------------\n\n * The [tutorial](tutorial.html) contains a further example.\n\n * The [API Reference](reference/index.html) contains automatically generated documentation for all types, modules\n   and functions in the library. This includes additional brief samples on using most of the\n   functions.\n\nContributing and copyright\n--------------------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork\nthe project and submit pull requests. If you\u0027re adding new public API, please also\nconsider adding [samples][content] that can be turned into a documentation. You might\nalso want to read [library design notes][readme] to understand how it works.\n\nThe library is available under the Apache 2.0 license, which allows modification and\nredistribution for both commercial and non-commercial purposes. For more information see the\n[License file][license] in the GitHub repository.\n\n  [content]: https://github.com/fsprojects/FSharp.Collections.ParallelSeq/tree/master/docs/content\n  [gh]: https://github.com/fsprojects/FSharp.Collections.ParallelSeq\n  [issues]: https://github.com/fsprojects/FSharp.Collections.ParallelSeq/issues\n  [readme]: https://github.com/fsprojects/FSharp.Collections.ParallelSeq/blob/master/README.md\n  [license]: https://github.com/fsprojects/FSharp.Collections.ParallelSeq/blob/master/LICENSE.txt\n*)"},{"uri":"http://fsprojects.github.io/FSharp.Collections.ParallelSeq/tutorial.html","title":"Tutorial\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#I \u0022../src/FSharp.Collections.ParallelSeq/bin/Debug/netstandard2.0\u0022\n\n(**\nTutorial\n========================\n\nHere is an example of using the parallel sequence combinators:\n*)\n#r \u0022FSharp.Collections.ParallelSeq.dll\u0022\n\nopen FSharp.Collections.ParallelSeq\n\nlet isPrime n =\n    let upperBound = int (sqrt (float n))\n\n    let hasDivisor =\n        [ 2..upperBound ]\n        |\u003E List.exists (fun i -\u003E n % i = 0)\n\n    not hasDivisor\n\nlet nums = [| 1..500000 |]\n\nlet finalDigitOfPrimes =\n    nums\n    |\u003E PSeq.filter isPrime\n    |\u003E PSeq.groupBy (fun i -\u003E i % 10)\n    |\u003E PSeq.map (fun (k, vs) -\u003E (k, Seq.length vs))\n    |\u003E PSeq.toArray\n\nlet averageOfFinalDigit =\n    nums\n    |\u003E PSeq.filter isPrime\n    |\u003E PSeq.groupBy (fun i -\u003E i % 10)\n    |\u003E PSeq.map (fun (k, vs) -\u003E (k, Seq.length vs))\n    |\u003E PSeq.averageBy (fun (k, n) -\u003E float n)\n\nlet sumOfLastDigitsOfPrimes =\n    nums\n    |\u003E PSeq.filter isPrime\n    |\u003E PSeq.sumBy (fun x -\u003E x % 10)"}]